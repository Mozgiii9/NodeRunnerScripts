#!/bin/bash

# –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è curl –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if ! command -v curl &> /dev/null; then
    sudo apt update
    sudo apt install curl -y
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
success_message() {
    echo -e "${GREEN}[‚úÖ] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
info_message() {
    echo -e "${CYAN}[‚ÑπÔ∏è] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
error_message() {
    echo -e "${RED}[‚ùå] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warning_message() {
    echo -e "${YELLOW}[‚ö†Ô∏è] $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    info_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    sudo apt-get update && sudo apt-get upgrade -y
    sudo apt install -y curl build-essential git wget lz4 jq make gcc nano automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip
    success_message "–ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ docker-compose –∫–æ–º–∞–Ω–¥—ã
check_docker_compose_format() {
    info_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ docker-compose –∫–æ–º–∞–Ω–¥—ã..."
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ docker compose
    if docker compose version &>/dev/null; then
        DOCKER_COMPOSE_CMD="docker compose"
        success_message "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞: docker compose"
    else
        DOCKER_COMPOSE_CMD="docker-compose"
        success_message "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞: docker-compose"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –∏ Docker Compose
install_docker() {
    info_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker..."
    if ! command -v docker &> /dev/null; then
        warning_message "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
        sudo apt install docker.io -y
        success_message "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        success_message "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi

    info_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker Compose..."
    if ! command -v docker-compose &> /dev/null; then
        warning_message "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..."
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        success_message "Docker Compose —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        success_message "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã docker-compose
    check_docker_compose_format

    sudo usermod -aG docker $USER
    success_message "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
}

# –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
clear

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
print_menu() {
    echo -e "\n${BOLD}${WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BOLD}${WHITE}‚ïë       üß† GENSYN NODE MANAGER          ‚ïë${NC}"
    echo -e "${BOLD}${WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
    
    echo -e "${BOLD}${BLUE}üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:${NC}\n"
    echo -e "${WHITE}[${CYAN}1${WHITE}] ${GREEN}‚ûú ${WHITE}üõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}2${WHITE}] ${GREEN}‚ûú ${WHITE}‚¨ÜÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}3${WHITE}] ${GREEN}‚ûú ${WHITE}üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤${NC}"
    echo -e "${WHITE}[${CYAN}4${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}5${WHITE}] ${GREEN}‚ûú ${WHITE}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}6${WHITE}] ${GREEN}‚ûú ${WHITE}üö™ –í—ã—Ö–æ–¥${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è docker-compose —Ñ–∞–π–ª–∞
create_docker_compose() {
    info_message "–°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yaml..."
    
    mv docker-compose.yaml docker-compose.yaml.old 2>/dev/null
    
    cat << 'EOF' > docker-compose.yaml
version: '3'

services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.120.0
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "55679:55679"  # Prometheus metrics (optional)
    environment:
      - OTEL_LOG_LEVEL=DEBUG

  swarm_node:
    image: europe-docker.pkg.dev/gensyn-public-b7d9/public/rl-swarm:v0.0.2
    command: ./run_hivemind_docker.sh
    #runtime: nvidia  # Enables GPU support; remove if no GPU is available
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - PEER_MULTI_ADDRS=/ip4/38.101.215.13/tcp/30002/p2p/QmQ2gEXoPJg6iMBSUFWGzAabS2VhnzuS782Y637hGjfsRJ
      - HOST_MULTI_ADDRS=/ip4/0.0.0.0/tcp/38331
    ports:
      - "38331:38331"  # Exposes the swarm node's P2P port
    depends_on:
      - otel-collector

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.webserver
    environment:
      - OTEL_SERVICE_NAME=rlswarm-fastapi
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - INITIAL_PEERS=/ip4/38.101.215.13/tcp/30002/p2p/QmQ2gEXoPJg6iMBSUFWGzAabS2VhnzuS782Y637hGjfsRJ
    ports:
      - "8177:8000"  # Maps port 8177 on the host to 8000 in the container 
    depends_on:
      - otel-collector
      - swarm_node
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/healthz"]
      interval: 30s
      retries: 3
EOF

    success_message "docker-compose.yaml —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
install_node() {
    echo -e "\n${BOLD}${BLUE}‚ö° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Gensyn...${NC}\n"

    echo -e "${WHITE}[${CYAN}1/6${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    install_dependencies
    sleep 1

    echo -e "${WHITE}[${CYAN}2/6${WHITE}] ${GREEN}‚ûú ${WHITE}üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose...${NC}"
    install_docker
    sleep 1

    echo -e "${WHITE}[${CYAN}3/6${WHITE}] ${GREEN}‚ûú ${WHITE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${NC}"
    sudo apt-get install -y python3 python3-pip
    success_message "Python –∏ pip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    sleep 1

    echo -e "${WHITE}[${CYAN}4/6${WHITE}] ${GREEN}‚ûú ${WHITE}üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
    git clone https://github.com/gensyn-ai/rl-swarm/
    cd rl-swarm
    success_message "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
    sleep 1

    echo -e "${WHITE}[${CYAN}5/6${WHITE}] ${GREEN}‚ûú ${WHITE}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
    create_docker_compose
    sleep 1

    echo -e "${WHITE}[${CYAN}6/6${WHITE}] ${GREEN}‚ûú ${WHITE}üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    $DOCKER_COMPOSE_CMD pull
    $DOCKER_COMPOSE_CMD up -d
    success_message "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã"

    echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}‚ú® –ù–æ–¥–∞ Gensyn —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!${NC}"
    echo -e "${YELLOW}üìù –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤:${NC}"
    echo -e "${CYAN}cd rl-swarm && $DOCKER_COMPOSE_CMD logs swarm_node${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
    
    info_message "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –Ω–æ–¥—ã..."
    $DOCKER_COMPOSE_CMD logs swarm_node
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã
update_node() {
    echo -e "\n${BOLD}${BLUE}‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Gensyn...${NC}\n"
    
    echo -e "${WHITE}[${CYAN}1/3${WHITE}] ${GREEN}‚ûú ${WHITE}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...${NC}"
    if [ ! -d "$HOME/rl-swarm" ]; then
        error_message "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–¥—É."
        return 1
    fi
    
    cd rl-swarm
    success_message "–ü–µ—Ä–µ—à–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–æ–¥—ã"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã docker-compose
    check_docker_compose_format
    
    echo -e "${WHITE}[${CYAN}2/3${WHITE}] ${GREEN}‚ûú ${WHITE}‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞...${NC}"
    VER=rl-swarm:v0.0.2
    sed -i "s#\(image: europe-docker.pkg.dev/gensyn-public-b7d9/public/\).*#\1$VER#g" docker-compose.yaml
    $DOCKER_COMPOSE_CMD pull
    success_message "–û–±—Ä–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ $VER"
    
    echo -e "${WHITE}[${CYAN}3/3${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    $DOCKER_COMPOSE_CMD up -d --force-recreate
    success_message "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π"
    
    echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}‚ú® –ù–æ–¥–∞ Gensyn —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!${NC}"
    echo -e "${YELLOW}üìù –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤:${NC}"
    echo -e "${CYAN}cd rl-swarm && $DOCKER_COMPOSE_CMD logs swarm_node${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
    
    info_message "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –Ω–æ–¥—ã..."
    $DOCKER_COMPOSE_CMD logs swarm_node
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤
check_logs() {
    echo -e "\n${BOLD}${BLUE}üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã Gensyn...${NC}\n"
    
    if [ ! -d "$HOME/rl-swarm" ]; then
        error_message "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–¥—É."
        return 1
    fi
    
    cd rl-swarm
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã docker-compose
    check_docker_compose_format
    
    info_message "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –Ω–æ–¥—ã..."
    $DOCKER_COMPOSE_CMD logs swarm_node
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–¥—ã
restart_node() {
    echo -e "\n${BOLD}${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã Gensyn...${NC}\n"
    
    if [ ! -d "$HOME/rl-swarm" ]; then
        error_message "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–¥—É."
        return 1
    fi
    
    cd rl-swarm
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã docker-compose
    check_docker_compose_format
    
    echo -e "${WHITE}[${CYAN}1/1${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    $DOCKER_COMPOSE_CMD restart
    success_message "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
    
    echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}‚ú® –ù–æ–¥–∞ Gensyn —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
    
    info_message "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –Ω–æ–¥—ã..."
    $DOCKER_COMPOSE_CMD logs swarm_node
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã
remove_node() {
    echo -e "\n${BOLD}${RED}‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Gensyn...${NC}\n"
    
    if [ ! -d "$HOME/rl-swarm" ]; then
        warning_message "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–¥–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞."
        return 0
    fi
    
    cd rl-swarm
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã docker-compose
    check_docker_compose_format
    
    echo -e "${WHITE}[${CYAN}1/2${WHITE}] ${GREEN}‚ûú ${WHITE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    $DOCKER_COMPOSE_CMD down -v
    success_message "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã"
    
    echo -e "${WHITE}[${CYAN}2/2${WHITE}] ${GREEN}‚ûú ${WHITE}üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...${NC}"
    cd $HOME
    rm -rf $HOME/rl-swarm
    success_message "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã —É–¥–∞–ª–µ–Ω–∞"
    
    echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}‚úÖ –ù–æ–¥–∞ Gensyn —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
while true; do
    clear
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
    curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash
    
    print_menu
    echo -e "${BOLD}${BLUE}üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è [1-6]:${NC} "
    read -p "‚ûú " choice

    case $choice in
        1)
            install_node
            ;;
        2)
            update_node
            ;;
        3)
            check_logs
            ;;
        4)
            restart_node
            ;;
        5)
            remove_node
            ;;
        6)
            echo -e "\n${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}\n"
            exit 0
            ;;
        *)
            echo -e "\n${RED}‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 6.${NC}\n"
            ;;
    esac
    
    if [[ "$choice" != "3" ]]; then
        echo -e "\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é..."
        read
    fi
done
