#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# –ò–∫–æ–Ω–∫–∏
CHECKMARK="‚úÖ"
ERROR="‚ùå"
PROGRESS="‚è≥"
INSTALL="üì¶"
SUCCESS="üéâ"
WARNING="‚ö†Ô∏è"
NODE="üñ•Ô∏è"
INFO="‚ÑπÔ∏è"
TRASH="üóëÔ∏è"
UPDATE="üîÑ"
LOGS="üìÑ"
EXIT="üö™"

# ASCII –∞—Ä—Ç –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
display_ascii() {
    if ! command -v curl &> /dev/null; then
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ curl...${NC}"
        sudo apt update
        sudo apt install curl -y
    fi
    sleep 1
    curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash
}

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü –º–µ–Ω—é
draw_top_border() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
}

draw_middle_border() {
    echo -e "${BLUE}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
}

draw_bottom_border() {
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
install_node() {
    echo -e "\n${BLUE}${NODE} –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Hyperlane...${NC}"
    
    echo -e "${PROGRESS} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    sudo apt update -y
    sudo apt upgrade -y

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${PROGRESS} –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
        sudo apt install docker.io -y
        sudo systemctl start docker
        sudo systemctl enable docker
    else
        echo -e "${CHECKMARK} Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi

    echo -e "${PROGRESS} –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    docker pull --platform linux/amd64 gcr.io/abacus-labs-dev/hyperlane-agent:agents-v1.0.0

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:${NC}"
    read NAME
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç EVM –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞—á–∏–Ω–∞—è —Å 0x:${NC}"
    read PRIVATE_KEY

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p $HOME/hyperlane_db_base
    chmod -R 777 $HOME/hyperlane_db_base

    echo -e "${PROGRESS} –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker run -d -it \
    --name hyperlane \
    --mount type=bind,source=$HOME/hyperlane_db_base,target=/hyperlane_db_base \
    gcr.io/abacus-labs-dev/hyperlane-agent:agents-v1.0.0 \
    ./validator \
    --db /hyperlane_db_base \
    --originChainName base \
    --reorgPeriod 1 \
    --validator.id "$NAME" \
    --checkpointSyncer.type localStorage \
    --checkpointSyncer.folder base \
    --checkpointSyncer.path /hyperlane_db_base/base_checkpoints \
    --validator.key "$PRIVATE_KEY" \
    --chains.base.signer.key "$PRIVATE_KEY" \
    --chains.base.customRpcUrls https://base.llamarpc.com

    echo -e "${SUCCESS} –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
    echo -e "${INFO} –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker logs -f hyperlane"
    
    echo -e "${PROGRESS} –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤..."
    sleep 2
    docker logs -f hyperlane
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
update_node() {
    echo -e "\n${BLUE}${UPDATE} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Hyperlane...${NC}"
    echo -e "${SUCCESS} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–¥—ã!"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    echo -e "\n${BLUE}${LOGS} –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤...${NC}"
    docker logs -f hyperlane
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
remove_node() {
    echo -e "\n${BLUE}${TRASH} –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Hyperlane...${NC}"
    
    echo -e "${PROGRESS} –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker stop hyperlane
    docker rm hyperlane

    if [ -d "$HOME/hyperlane_db_base" ]; then
        echo -e "${PROGRESS} –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–æ–¥—ã..."
        rm -rf $HOME/hyperlane_db_base
        echo -e "${CHECKMARK} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã —É–¥–∞–ª–µ–Ω–∞"
    fi

    echo -e "${SUCCESS} –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        display_ascii
        draw_top_border
        echo -e "  ${SUCCESS}  ${GREEN}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π Hyperlane!${NC}"
        draw_middle_border
        echo -e "${CYAN}  1)${NC} –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É ${INSTALL}"
        echo -e "${CYAN}  2)${NC} –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É ${UPDATE}"
        echo -e "${CYAN}  3)${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ ${LOGS}"
        echo -e "${CYAN}  4)${NC} –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É ${TRASH}"
        echo -e "${CYAN}  5)${NC} –í—ã—Ö–æ–¥ ${EXIT}"
        draw_bottom_border
        
        read -p "$(echo -e $GREEN)–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-5]:${NC} " choice

        case $choice in
            1) install_node ;;
            2) update_node ;;
            3) view_logs ;;
            4) remove_node ;;
            5) echo -e "${SUCCESS} –í—ã—Ö–æ–¥..."; exit 0 ;;
            *) echo -e "${ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5." ;;
        esac

        if [ "$choice" != "1" ] && [ "$choice" != "3" ]; then
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
        fi
    done
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main_menu
