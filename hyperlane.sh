#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# –õ–æ–≥–æ—Ç–∏–ø
display_logo() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è curl
    if ! command -v curl &> /dev/null; then
        echo -e "${ORANGE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ curl...${NC}"
        apt update
        apt install curl -y
    fi
    sleep 1

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
    curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash
    sleep 2
}

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü –º–µ–Ω—é
draw_top_border() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
}

draw_middle_border() {
    echo -e "${BLUE}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
}

draw_bottom_border() {
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    echo -e "\n${YELLOW}üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...${NC}"
    CPU=$(grep -c ^processor /proc/cpuinfo)
    RAM=$(free -m | awk '/Mem:/ { print $2 }')
    DISK=$(df -h / | awk '/\// { print $4 }' | sed 's/G//g')

    echo -e "${CYAN}–Ø–¥–µ—Ä CPU: ${GREEN}$CPU${NC} (–º–∏–Ω–∏–º—É–º: 2)"
    echo -e "${CYAN}–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: ${GREEN}${RAM}MB${NC} (–º–∏–Ω–∏–º—É–º: 2GB)"

    if [ "$CPU" -lt 2 ] || [ "$RAM" -lt 2000 ]; then
        echo -e "${RED}‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º!${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç!${NC}"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    echo -e "\n${YELLOW}üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${NC}"
    if ! command -v docker &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER
        echo -e "${GREEN}‚úÖ Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${GREEN}‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∏ NVM
install_node() {
    echo -e "\n${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∏ NVM...${NC}"
    if ! command -v nvm &> /dev/null; then
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
        source ~/.bashrc
        nvm install 20
        echo -e "${GREEN}‚úÖ Node.js –∏ NVM —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    else
        echo -e "${GREEN}‚úÖ Node.js –∏ NVM —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Foundry
install_foundry() {
    echo -e "\n${YELLOW}üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Foundry...${NC}"
    if ! command -v foundryup &> /dev/null; then
        curl -L https://foundry.paradigm.xyz | bash
        source ~/.bashrc
        foundryup
        echo -e "${GREEN}‚úÖ Foundry —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${GREEN}‚úÖ Foundry —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Hyperlane
install_hyperlane() {
    echo -e "\n${YELLOW}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Hyperlane...${NC}"
    if ! command -v hyperlane &> /dev/null; then
        npm install -g @hyperlane-xyz/cli
        echo -e "${GREEN}‚úÖ Hyperlane CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi

    echo -e "${YELLOW}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ Hyperlane...${NC}"
    docker pull --platform linux/amd64 gcr.io/abacus-labs-dev/hyperlane-agent:agents-v1.0.0
    echo -e "${GREEN}‚úÖ –û–±—Ä–∞–∑ Hyperlane –∑–∞–≥—Ä—É–∂–µ–Ω${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
configure_validator() {
    echo -e "\n${YELLOW}‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...${NC}"
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: " VALIDATOR_NAME
    
    while true; do
        read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (—Ñ–æ—Ä–º–∞—Ç: 0x + 64 hex —Å–∏–º–≤–æ–ª–∞): " PRIVATE_KEY
        echo
        if [[ $PRIVATE_KEY =~ ^0x[0-9a-fA-F]{64}$ ]]; then
            break
        else
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞!${NC}"
        fi
    done
    
    read -p "–í–≤–µ–¥–∏—Ç–µ RPC URL: " RPC_URL

    DB_DIR="/opt/hyperlane_db_base"
    mkdir -p $DB_DIR
    chmod -R 777 $DB_DIR

    CONTAINER_NAME="hyperlane"
    if docker ps -a --format '{{.Names}}' | grep -q "^hyperlane$"; then
        echo -e "${YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä 'hyperlane'${NC}"
        read -p "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä? (y/n): " choice
        if [[ "$choice" == "y" ]]; then
            docker rm -f hyperlane
            echo -e "${GREEN}‚úÖ –°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω${NC}"
        else
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: " CONTAINER_NAME
        fi
    fi

    docker run -d \
        -it \
        --name "$CONTAINER_NAME" \
        --mount type=bind,source="$DB_DIR",target=/hyperlane_db_base \
        gcr.io/abacus-labs-dev/hyperlane-agent:agents-v1.0.0 \
        ./validator \
        --db /hyperlane_db_base \
        --originChainName base \
        --reorgPeriod 1 \
        --validator.id "$VALIDATOR_NAME" \
        --checkpointSyncer.type localStorage \
        --checkpointSyncer.folder base \
        --checkpointSyncer.path /hyperlane_db_base/base_checkpoints \
        --validator.key "$PRIVATE_KEY" \
        --chains.base.signer.key "$PRIVATE_KEY" \
        --chains.base.customRpcUrls "$RPC_URL"

    echo -e "${GREEN}‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω${NC}"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    echo -e "\n${YELLOW}üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤...${NC}"
    if docker ps -a --format '{{.Names}}' | grep -q "^hyperlane$"; then
        docker logs -f hyperlane
    else
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'hyperlane' –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        display_logo
        draw_top_border
        echo -e "  ${GREEN}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Hyperlane Node!${NC}"
        draw_middle_border
        echo -e "${CYAN}  1)${NC} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è üìä"
        echo -e "${CYAN}  2)${NC} –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Docker, Node.js, Foundry) üì¶"
        echo -e "${CYAN}  3)${NC} –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Hyperlane üöÄ"
        echo -e "${CYAN}  4)${NC} –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä ‚öôÔ∏è"
        echo -e "${CYAN}  5)${NC} –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ üìÑ"
        echo -e "${CYAN}  6)${NC} –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —à–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚ú®"
        echo -e "${CYAN}  0)${NC} –í—ã—Ö–æ–¥ üö™"
        draw_bottom_border
        
        read -p "$(echo -e $GREEN)–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-6]:${NC} " choice

        case $choice in
            1) check_requirements ;;
            2) install_docker && install_node && install_foundry ;;
            3) install_hyperlane ;;
            4) configure_validator ;;
            5) view_logs ;;
            6)
                check_requirements
                install_docker
                install_node
                install_foundry
                install_hyperlane
                configure_validator
                view_logs
                ;;
            0)
                echo -e "${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
        esac
    done
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu
