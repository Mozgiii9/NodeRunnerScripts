require('dotenv').config();
const { exec } = require('child_process');
const { FaucetService } = require('./services/FaucetService.js');
const { WalletService } = require('./services/WalletService.js');
const { LogService } = require('./services/LogService.js');
const { FAUCET_CONFIG } = require('./config/config.js');
const { ProxyService } = require('./services/ProxyService.js');

// –≠–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
const EMOJIS = {
    SUCCESS: '‚úÖ',
    ERROR: '‚ùå',
    WALLET: 'üëõ',
    PROXY: 'üåê',
    LOADING: '‚è≥',
    MONEY: 'üí∞',
    ROCKET: 'üöÄ',
    WARNING: '‚ö†Ô∏è'
};

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function displayLogo() {
    return new Promise((resolve, reject) => {
        exec('curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash', 
            (error, stdout, stderr) => {
                if (error) {
                    console.error(`${EMOJIS.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: ${error}`);
                    reject(error);
                }
                console.log(stdout);
                resolve();
            });
    });
}

async function displayStatistics(walletService, proxyService) {
    console.log('\n=================================');
    console.log(`${EMOJIS.WALLET} –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: ${walletService.getTotalWallets()}`);
    console.log(`${EMOJIS.PROXY} –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${proxyService.getTotalProxies()}`);
    console.log(`${EMOJIS.MONEY} –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞: ${FAUCET_CONFIG.DEFAULT_AMOUNT}`);
    console.log('=================================\n');
}

async function main() {
    try {
        LogService.clearScreen();
        await displayLogo();
        
        const walletService = new WalletService();
        const proxyService = new ProxyService();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–æ–∫—Å–∏
        await walletService.loadWallets('src/config/wallets.txt');
        await proxyService.loadProxies('src/config/proxies.txt');

        if (walletService.getTotalWallets() === 0) {
            throw new Error(`${EMOJIS.ERROR} –ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ wallets.txt`);
        }

        await displayStatistics(walletService, proxyService);

        while (true) {
            try {
                const currentAddress = walletService.getCurrentWallet();
                const currentProxy = proxyService.getNextProxy();

                await LogService.info(`${EMOJIS.WALLET} –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: ${currentAddress}`);
                await LogService.info(`${EMOJIS.PROXY} –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ${currentProxy || '–±–µ–∑ –ø—Ä–æ–∫—Å–∏'}`);

                const faucetService = new FaucetService(currentAddress, currentProxy);
                const result = await faucetService.requestFaucet();

                if (result.success) {
                    await LogService.success(`${EMOJIS.SUCCESS} –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∫—Ä–∞–Ω—É`);
                } else {
                    await LogService.error(`${EMOJIS.ERROR} –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫—Ä–∞–Ω—É`, result.error);
                }

                walletService.rotateWallet();
                
                await LogService.info(`${EMOJIS.LOADING} –û–∂–∏–¥–∞–Ω–∏–µ ${FAUCET_CONFIG.RETRY_DELAY/1000} —Å–µ–∫—É–Ω–¥...`);
                await sleep(FAUCET_CONFIG.RETRY_DELAY);

            } catch (error) {
                await LogService.error(`${EMOJIS.ERROR} –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ`, error);
                await sleep(FAUCET_CONFIG.RETRY_DELAY);
            }
        }
    } catch (error) {
        await LogService.error(`${EMOJIS.ERROR} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞`, error);
        process.exit(1);
    }
}

main();
