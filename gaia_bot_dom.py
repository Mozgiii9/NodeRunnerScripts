import aiohttp
import asyncio
import random
import os
import logging
import sys
from datetime import datetime
from typing import List, Dict, Optional
from dataclasses import dataclass
from aiohttp import ClientTimeout

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('gaia_domain_bot.log')
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞."""
    node_id: str
    api_key: str
    num_threads: int
    retry_count: int = 3
    retry_delay: int = 5
    timeout: int = 300
    base_url: str = "gaia.domains"

    @property
    def api_url(self) -> str:
        return f"https://{self.node_id}.{self.base_url}/v1/chat/completions"

    @property
    def headers(self) -> Dict[str, str]:
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Accept": "application/json",
            "Content-Type": "application/json"
        }

class GaiaDomainBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
        self.config = self._load_config()
        self.roles: List[str] = []
        self.phrases: List[str] = []
        self.sessions: List[Optional[aiohttp.ClientSession]] = []
        self.timeout = ClientTimeout(total=self.config.timeout)

    def _load_config(self) -> BotConfig:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        try:
            return BotConfig(
                node_id=os.getenv("NODE_ID", ""),
                api_key=os.getenv("GAIA_API_KEY", ""),
                num_threads=int(os.getenv("NUM_THREADS", "1")),
                retry_count=int(os.getenv("RETRY_COUNT", "3")),
                retry_delay=int(os.getenv("RETRY_DELAY", "5")),
                timeout=int(os.getenv("TIMEOUT", "300"))
            )
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π."""
        try:
            self.roles = self._load_from_file("roles.txt")
            self.phrases = self._load_from_file("phrases.txt")
            self.sessions = [aiohttp.ClientSession() for _ in range(self.config.num_threads)]
            logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {self.config.num_threads} –ø–æ—Ç–æ–∫–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    def _load_from_file(self, file_name: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        try:
            with open(file_name, "r") as file:
                data = [line.strip() for line in file.readlines() if line.strip()]
                if not data:
                    raise ValueError(f"–§–∞–π–ª {file_name} –ø—É—Å—Ç")
                return data
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)

    def _generate_message(self) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
        user_message = {
            "role": "user",
            "content": random.choice(self.phrases)
        }
        other_message = {
            "role": random.choice([r for r in self.roles if r != "user"]),
            "content": random.choice(self.phrases)
        }
        return [user_message, other_message]

    async def _send_request(self, worker_id: int, messages: List[Dict[str, str]]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        session = self.sessions[worker_id]
        for attempt in range(self.config.retry_count):
            try:
                async with session.post(
                    self.config.api_url,
                    json={"messages": messages},
                    headers=self.config.headers,
                    timeout=self.timeout
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        self._log_success(worker_id, messages[0]["content"], result)
                        return
                    else:
                        logger.warning(f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {worker_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.retry_count}: –°—Ç–∞—Ç—É—Å {response.status}")
            
            except asyncio.TimeoutError:
                logger.warning(f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {worker_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.retry_count}: –¢–∞–π–º–∞—É—Ç")
            except Exception as e:
                logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä {worker_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config.retry_count}: –û—à–∏–±–∫–∞: {e}")
            
            if attempt < self.config.retry_count - 1:
                await asyncio.sleep(self.config.retry_delay)

    def _log_success(self, worker_id: int, question: str, result: Dict) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
        response = result["choices"][0]["message"]["content"]
        logger.info(f"ü§ñ –í–æ—Ä–∫–µ—Ä {worker_id}")
        logger.info(f"üì§ –í–æ–ø—Ä–æ—Å: {question}")
        logger.info(f"üì• –û—Ç–≤–µ—Ç: {response}")
        logger.info("=" * 50)

    async def _worker(self, worker_id: int) -> None:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
        logger.info(f"üöÄ –í–æ—Ä–∫–µ—Ä {worker_id} –∑–∞–ø—É—â–µ–Ω")
        while True:
            try:
                messages = self._generate_message()
                await self._send_request(worker_id, messages)
                await asyncio.sleep(3)
            except Exception as e:
                logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä {worker_id} –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(5)

    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏."""
        await self.initialize()
        logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤...")
        
        try:
            workers = [self._worker(i) for i in range(self.config.num_threads)]
            await asyncio.gather(*workers)
        except KeyboardInterrupt:
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            for session in self.sessions:
                if session:
                    await session.close()

if __name__ == "__main__":
    bot = GaiaDomainBot()
    asyncio.run(bot.run())
