#!/bin/bash
# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
ORANGE='\033[38;5;214m'
NC='\033[0m' # –ë–µ–∑ —Ü–≤–µ—Ç–∞

# –í—ã–≤–æ–¥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash

echo -e "\n${BOLD}${WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BOLD}${WHITE}‚ïë        üöÄ T3RN NODE SETUP          ‚ïë${NC}"
    echo -e "${BOLD}${WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
sleep 2

# Log file for debugging
LOG_FILE="setup.log"
exec > >(tee -a "$LOG_FILE") 2>&1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
usage() {
    echo -e "${GREEN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--verbose] [--dry-run]${NC}"
    echo -e "${GREEN}  --verbose: –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.${NC}"
    echo -e "${GREEN}  --dry-run: –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.${NC}"
    exit 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ executor
kill_running_executor() {
    local pid
    pid=$(pgrep -f "./executor")

    if [ -n "$pid" ]; then
        if $DRY_RUN; then
            echo -e "${GREEN}[Dry-run] –ó–∞–≤–µ—Ä—à–∏–ª –±—ã —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å executor (PID: $pid)${NC}"
        else
            echo -e "${ORANGE}‚öôÔ∏è –ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å executor. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...${NC}"
            kill "$pid"
            sleep 2
            echo -e "${GREEN}‚úÖ –ü—Ä–æ—Ü–µ—Å—Å executor —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.${NC}"
        fi
    else
        echo -e "${BLUE}‚ÑπÔ∏è –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ executor –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ jq, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
install_jq_if_needed() {
    if ! command -v jq &>/dev/null; then
        echo -e "${ORANGE}üì¶ jq —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq...${NC}"
        
        # Detect OS and install jq
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update && sudo apt-get install -y jq
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install jq  # macOS
        elif [[ "$OSTYPE" == "alpine"* ]]; then
            apk add jq      # Alpine Linux
        else
            echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å jq. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
            echo -e "${ORANGE}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jq —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã.${NC}"
            exit 1
        fi

        # Verify installation
        if command -v jq &>/dev/null; then
            echo -e "${GREEN}‚úÖ jq —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
        else
            echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å jq. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
            exit 1
        fi
    fi
}

# –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
VERBOSE=false
DRY_RUN=false
for arg in "$@"; do
    case "$arg" in
        --verbose)
            VERBOSE=true
            ;;
        --dry-run)
            DRY_RUN=true
            ;;
        --help)
            usage
            ;;
        *)
            echo -e "${RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $arg${NC}"
            usage
            ;;
    esac
done

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq
install_jq_if_needed

# –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
if $VERBOSE; then
    set -x
fi

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ dry-run
if $DRY_RUN; then
    echo -e "${ORANGE}–†–µ–∂–∏–º dry-run –≤–∫–ª—é—á–µ–Ω. –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –≤–Ω–µ—Å–µ–Ω—ã.${NC}"
	sleep 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
ask_for_input() {
    local prompt="$1"
    local input

    read -p "$prompt: " input
    echo "$input"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≥–∞–∑–∞
validate_gas_value() {
    local gas_value="$1"
    
    # Check if the input is an integer
    if [[ ! "$gas_value" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}‚õΩ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–∑–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 100 –¥–æ 20000)${NC}"
        return 1
    fi

    # Check if the gas value is within the allowed range
    if (( gas_value < 100 || gas_value > 20000 )); then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ –≥–∞–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 100 –¥–æ 20000.${NC}"
        return 1
    fi

    return 0
}

parse_rpc_input() {
    local input="$1"
    local -a endpoints
    IFS=',' read -ra endpoints <<< "$input"
    printf '['
    for ((i=0; i<${#endpoints[@]}; i++)); do
        endpoint=$(echo "${endpoints[$i]}" | xargs)  # Trim whitespace
        printf '"%s"' "$endpoint"
        [[ $i -ne $((${#endpoints[@]}-1)) ]] && printf ','
    done
    printf ']'
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
LANG_CODE="ru"
MSG_VERSION_CHOICE="üß™ –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
MSG_LATEST_OPTION="1) üöÄ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è"
MSG_SPECIFIC_OPTION="2) üìå –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"
MSG_ENTER_VERSION="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, v0.51.0):"
MSG_INVALID_VERSION_CHOICE="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2"
MSG_INVALID_VERSION_FORMAT="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ v0.51.0"
MSG_CLEANUP="üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫..."
MSG_DOWNLOAD="üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞..."
MSG_EXTRACT="üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
MSG_INVALID_INPUT="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'api' –∏–ª–∏ 'rpc'."
MSG_PRIVATE_KEY="üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞"
MSG_GAS_VALUE="‚õΩ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–∑–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 100 –¥–æ 20000)"
MSG_INVALID_GAS="‚ùå –û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ –≥–∞–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 100 –¥–æ 20000."
MSG_NODE_TYPE="üñ•Ô∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å API-—É–∑–µ–ª –∏–ª–∏ RPC-—É–∑–µ–ª? (api/rpc)"
MSG_RPC_ENDPOINTS="üîå –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ RPC-—Ç–æ—á–∫–∏? (y/n)"
MSG_THANKS="üí´ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã T3RN —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
MSG_L1RN_RPC="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ L1RN RPC endpoints:"
MSG_SELECT_L1RN="üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ L1RN RPC endpoints –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1,2):"
MSG_INVALID_SELECTION="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: %s. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
MSG_OUT_OF_RANGE="‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å %s –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
MSG_NO_SELECTION="‚ö†Ô∏è –ù–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤—ã–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω endpoint."
MSG_ALCHEMY_API_KEY="üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Alchemy API –∫–ª—é—á:"
MSG_CREATE_DIR="üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é t3rn..."
MSG_DOWNLOAD_COMPLETE="‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
MSG_NAVIGATE_BINARY="üîç –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ executor..."
MSG_COLLECTED_INPUTS="üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
MSG_NODE_TYPE_LABEL="üè∑Ô∏è –¢–∏–ø —É–∑–ª–∞:"
MSG_ALCHEMY_API_KEY_LABEL="üîë –ö–ª—é—á Alchemy API:"
MSG_GAS_VALUE_LABEL="‚õΩ –ó–Ω–∞—á–µ–Ω–∏–µ –≥–∞–∑–∞:"
MSG_RPC_ENDPOINTS_LABEL="üåê –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–∏ –∏ RPC-—Ç–æ—á–∫–∏:"
MSG_WALLET_PRIVATE_KEY_LABEL="üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞:"
MSG_FAILED_CREATE_DIR="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é t3rn. –í—ã—Ö–æ–¥."
MSG_FAILED_FETCH_TAG="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ —Ä–µ–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
MSG_FAILED_DOWNLOAD="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
MSG_FAILED_EXTRACT="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ö–∏–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
MSG_FAILED_NAVIGATE="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ executor. –í—ã—Ö–æ–¥."
MSG_DELETE_T3RN_DIR="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ t3rn..."
MSG_DELETE_EXECUTOR_DIR="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ executor..."
MSG_DELETE_TAR_GZ="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö tar.gz —Ñ–∞–π–ª–æ–≤..."
MSG_EXTRACTION_COMPLETE="‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω."
MSG_RUNNING_NODE="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —É–∑–ª–∞..."
MSG_DRY_RUN_DELETE="üîç [Dry-run] –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ t3rn –∏ executor –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
MSG_DRY_RUN_CREATE_DIR="üîç [Dry-run] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è t3rn."
MSG_DRY_RUN_NAVIGATE="üîç [Dry-run] –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ executor."
MSG_DRY_RUN_RUN_NODE="üîç [Dry-run] –£–∑–µ–ª –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω."
MSG_ENTER_CUSTOM_RPC="üîå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ RPC-—Ç–æ—á–∫–∏:"
MSG_ARBT_RPC="üîå Arbitrum Sepolia RPC-—Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DEFAULT_RPC_ENDPOINTS_ARBT)"
MSG_BSSP_RPC="üîå Base Sepolia RPC-—Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DEFAULT_RPC_ENDPOINTS_BSSP)"
MSG_BLSS_RPC="üîå Blast Sepolia RPC-—Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DEFAULT_RPC_ENDPOINTS_BLSS)"
MSG_OPSP_RPC="üîå Optimism Sepolia RPC-—Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $DEFAULT_RPC_ENDPOINTS_OPSP)"
MSG_AVAILABLE_NETWORKS="üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏:"
MSG_ARBT_DESC="üî∑ ARBT = arbitrum-sepolia"
MSG_BSSP_DESC="üî∑ BAST = base-sepolia"
MSG_OPSP_DESC="üî∑ OPST = optimism-sepolia"
MSG_BLSS_DESC="üî∑ BLST = blast-sepolia"
MSG_L2RN_ALWAYS_ENABLED="‚úÖ L2RN –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω."
MSG_ENTER_NETWORKS="üåê –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: ARBT,BAST,OPST,BLST –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter/–≤–≤–µ–¥–∏—Ç–µ 'all' –¥–ª—è –≤—Å–µ—Ö):"
MSG_INVALID_NETWORK="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Ç—å: %s. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–µ—Ç–∏."
MSG_KILLING_EXECUTOR="‚öôÔ∏è –ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å executor. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
MSG_EXECUTOR_KILLED="‚úÖ –ü—Ä–æ—Ü–µ—Å—Å executor —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω."
MSG_NO_EXECUTOR_RUNNING="‚ÑπÔ∏è –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ executor –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
MSG_CHECKING_EXECUTOR="üîç === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ executor ==="
MSG_KILLING_EXECUTOR="‚öôÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å executor. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤..."
MSG_EXECUTOR_KILLED="‚úÖ –°—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å executor —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
MSG_NO_EXECUTOR_RUNNING="‚úÖ –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ executor –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å."
MSG_WARNING="‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ï–°–õ–ò –í–´ –î–ï–õ–ò–¢–ï–°–¨ –°–ö–†–ò–ù–®–û–¢–ê–ú–ò –≠–¢–û–ì–û –°–ö–†–ò–ü–¢–ê –ò–ó-–ó–ê –û–®–ò–ë–ö–ò, –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –í–ê–®–ò –ü–†–ò–í–ê–¢–ù–´–ï –ö–õ–Æ–ß–ò –ò –ö–õ–Æ–ß ALCHEMY API –ù–ï –í–ò–î–ù–´! –í –ü–†–û–¢–ò–í–ù–û–ú –°–õ–£–ß–ê–ï –í–´ –ú–û–ñ–ï–¢–ï –ü–û–¢–ï–†–Ø–¢–¨ –í–°–ï –°–í–û–ò –ê–ö–¢–ò–í–´ –í –ö–û–®–ï–õ–¨–ö–ï –ò–õ–ò –†–ê–°–ö–†–´–¢–¨ –î–û–°–¢–£–ü –ö API! ‚ö†Ô∏è"
MSG_JQ_REQUIRED="üì¶ jq —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq..."
MSG_JQ_INSTALL_FAILED="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å jq. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
MSG_JQ_INSTALL_SUCCESS="‚úÖ jq —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
MSG_NODE_TYPE_OPTIONS="üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–∑–ª–∞:"
MSG_API_MODE="1Ô∏è‚É£ API –£–∑–µ–ª - –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ API"
MSG_ALCHEMY_MODE="2Ô∏è‚É£ Alchemy RPC - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RPC endpoints –æ—Ç Alchemy (—Ç—Ä–µ–±—É–µ—Ç—Å—è API-–∫–ª—é—á)"
MSG_CUSTOM_MODE="3Ô∏è‚É£ –ö–∞—Å—Ç–æ–º–Ω—ã–π RPC - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö RPC endpoints (Alchemy –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)"
MSG_API_MODE_DESC="üöÄ –†–µ–∂–∏–º API: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–∫–ª—é—á–µ–Ω–∞"
MSG_ALCHEMY_MODE_DESC="üîå –†–µ–∂–∏–º Alchemy: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è RPC endpoints –æ—Ç Alchemy"
MSG_CUSTOM_MODE_DESC="üõ†Ô∏è –†–µ–∂–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ RPC: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ endpoints"
MSG_SELECT_NODE_TYPE="üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä (1/2/3): "
MSG_INVALID_NODE_TYPE="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–∑–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3."

# Step 0: Clean up previous installations
echo -e "${GREEN}$MSG_CLEANUP${NC}"
if $DRY_RUN; then
    echo -e "${ORANGE}$MSG_DRY_RUN_DELETE${NC}"
	sleep 1
else
    if [ -d "t3rn" ]; then
        echo -e "${ORANGE}$MSG_DELETE_T3RN_DIR${NC}"
        rm -rf t3rn
    fi
	
	sleep 1

    if [ -d "executor" ]; then
        echo -e "${ORANGE}$MSG_DELETE_EXECUTOR_DIR${NC}"
        rm -rf executor
    fi
	
	sleep 1
	
    if ls executor-linux-*.tar.gz 1> /dev/null 2>&1; then
        echo -e "${ORANGE}$MSG_DELETE_TAR_GZ${NC}"
        rm -f executor-linux-*.tar.gz
    fi
	
	sleep 1
fi

# Step 1: Create and navigate to t3rn directory
echo -e "${ORANGE}$MSG_CREATE_DIR${NC}"
if $DRY_RUN; then
    echo -e "${GREEN}$MSG_DRY_RUN_CREATE_DIR${NC}"
else
    mkdir -p t3rn
    cd t3rn || { echo -e "${RED}$MSG_FAILED_CREATE_DIR${NC}"; exit 1; }
fi

# Step 2.5: Version selection
echo -e "${GREEN}${MSG_VERSION_CHOICE}${NC}"
echo -e " ${ORANGE}${MSG_LATEST_OPTION}${NC}"
echo -e " ${ORANGE}${MSG_SPECIFIC_OPTION}${NC}"

while true; do
    read -p "$(echo -e "${GREEN}${MSG_SELECT_NODE_TYPE}${NC}")" VERSION_CHOICE
    
    case $VERSION_CHOICE in
        1)
            LATEST_TAG=$(curl -s https://api.github.com/repos/t3rn/executor-release/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
            [ -z "$LATEST_TAG" ] && { echo -e "${RED}$MSG_FAILED_FETCH_TAG${NC}"; exit 1; }
            break
            ;;
        2)
            while true; do
                echo -e "${GREEN}${MSG_ENTER_VERSION}${NC}"
                read LATEST_TAG
                [[ "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?$ ]] && break
                echo -e "${RED}${MSG_INVALID_VERSION_FORMAT}${NC}"
            done
            break
            ;;
        *)
            echo -e "${RED}${MSG_INVALID_VERSION_CHOICE}${NC}"
            ;;
    esac
done

# Step 2: Download the latest release
DOWNLOAD_URL="https://github.com/t3rn/executor-release/releases/download/$LATEST_TAG/executor-linux-$LATEST_TAG.tar.gz"
echo -e "${GREEN}$MSG_DOWNLOAD${NC}"
wget --progress=bar:force:noscroll "$DOWNLOAD_URL" -O "executor-linux-$LATEST_TAG.tar.gz"
if [ $? -ne 0 ]; then
    echo "${RED}$MSG_FAILED_DOWNLOAD${NC}"
	sleep 2
    exit 1
fi
echo -e "${GREEN}$MSG_DOWNLOAD_COMPLETE${NC}"
sleep 1

# Step 3: Extract the archive
echo -e "${ORANGE}$MSG_EXTRACT${NC}"
# extract_archive "executor-linux-$LATEST_TAG.tar.gz"
tar -xvzf "executor-linux-$LATEST_TAG.tar.gz"
if [ $? -ne 0 ]; then
    echo -e "${RED}$MSG_FAILED_EXTRACT${NC}"
	sleep 2
    exit 1
fi

echo -e "${GREEN}$MSG_EXTRACTION_COMPLETE${NC}"
sleep 1

# Step 4: Navigate to the executor binary location
echo -e "${ORANGE}$MSG_NAVIGATE_BINARY${NC}"
if $DRY_RUN; then
    echo -e "${GREEN}$MSG_DRY_RUN_NAVIGATE${NC}"
	sleep 1
else
    mkdir -p executor/executor/bin
    cd executor/executor/bin || { echo -e "${RED}$MSG_FAILED_NAVIGATE${NC}"; exit 1; }
	sleep 1
fi

# Ask if the user wants to run an API node or RPC node
echo -e "${GREEN}$MSG_NODE_TYPE_OPTIONS${NC}"
echo -e " ${ORANGE}${MSG_API_MODE}${NC}"
echo -e " ${ORANGE}${MSG_ALCHEMY_MODE}${NC}"
echo -e " ${ORANGE}${MSG_CUSTOM_MODE}${NC}"

while true; do
    read -p "$(echo -e "${GREEN}${MSG_SELECT_NODE_TYPE}${NC}")" NODE_TYPE_CHOICE
    
    case $NODE_TYPE_CHOICE in
        1)
            NODE_TYPE="api"
            echo -e "${GREEN}${MSG_API_MODE_DESC}${NC}"
            export EXECUTOR_PROCESS_PENDING_ORDERS_FROM_API=true
            export EXECUTOR_PROCESS_ORDERS_API_ENABLED=true
            break
            ;;
        2)
            NODE_TYPE="alchemy-rpc"
            echo -e "${GREEN}${MSG_ALCHEMY_MODE_DESC}${NC}"
            export EXECUTOR_PROCESS_PENDING_ORDERS_FROM_API=false
            export EXECUTOR_PROCESS_ORDERS_API_ENABLED=false
            break
            ;;
        3)
            NODE_TYPE="custom-rpc"
            echo -e "${GREEN}${MSG_CUSTOM_MODE_DESC}${NC}"
            export EXECUTOR_PROCESS_PENDING_ORDERS_FROM_API=false
            export EXECUTOR_PROCESS_ORDERS_API_ENABLED=false
            break
            ;;
        *)
            echo -e "${RED}${MSG_INVALID_NODE_TYPE}${NC}"
            ;;
    esac
done

# Ask for wallet private key (masked input)
echo -e "${GREEN}$MSG_PRIVATE_KEY${NC}"
WALLET_PRIVATE_KEY=$(ask_for_input "")

# Ask for Alchemy API key (masked input, if RPC node is selected)
if [[ "$NODE_TYPE" == "alchemy-rpc" ]]; then
    echo -e "${GREEN}$MSG_ALCHEMY_API_KEY${NC}"
    ALCHEMY_API_KEY=$(ask_for_input "")
elif [[ "$NODE_TYPE" == "custom-rpc" ]]; then
    echo -e "${ORANGE}${MSG_CUSTOM_RPC_WARNING}${NC}"
    sleep 2
fi

# Ask for gas value and validate it
while true; do
	echo -e "${GREEN}$MSG_GAS_VALUE${NC} "
    read GAS_VALUE
    if [[ "$GAS_VALUE" =~ ^[0-9]+$ ]] && (( GAS_VALUE >= 100 && GAS_VALUE <= 20000 )); then
        break
    else
        echo -e "${RED}$MSG_INVALID_GAS${NC}"
    fi
done

#–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
configure_rpc_endpoints() {
    case $NODE_TYPE in
        "alchemy-rpc")
            echo -e "${GREEN}‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Alchemy endpoints...${NC}"
            RPC_ENDPOINTS_JSON=$(echo "$RPC_ENDPOINTS_JSON" | jq \
                --arg arbt "https://arb-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
                --arg bast "https://base-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
                --arg opst "https://opt-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
                --arg blst "https://blast-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
                '.arbt += [$arbt] | .bast += [$bast] | .opst += [$opst] | .blst += [$blst]')
            ;;

        "custom-rpc")
            echo -e "${GREEN}‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö RPC endpoints...${NC}"
            RPC_ENDPOINTS_JSON=$(echo "$RPC_ENDPOINTS_JSON" | jq 'del(.arbt, .bast, .opst, .blst)')
            ;;
    esac
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
configure_rpc_endpoints

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É–∑–ª–∞
export ENVIRONMENT=testnet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
export LOG_LEVEL=debug
export LOG_PRETTY=false

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫, –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
export EXECUTOR_PROCESS_BIDS_ENABLED=true
export EXECUTOR_PROCESS_ORDERS_ENABLED=true
export EXECUTOR_PROCESS_CLAIMS_ENABLED=true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–∑–ª–∞
if [[ "$NODE_TYPE" == "api" ]]; then
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API –¥–ª—è API —É–∑–ª–æ–≤
    export EXECUTOR_PROCESS_PENDING_ORDERS_FROM_API=true
    export EXECUTOR_PROCESS_ORDERS_API_ENABLED=true
else
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API –¥–ª—è RPC —É–∑–ª–æ–≤
    export EXECUTOR_PROCESS_PENDING_ORDERS_FROM_API=false
    export EXECUTOR_PROCESS_ORDERS_API_ENABLED=false
fi

# RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_RPC_ENDPOINTS_JSON='{
  "l2rn": ["https://b2n.rpc.caldera.xyz/http"],
  "arbt": ["https://arbitrum-sepolia.drpc.org"],
  "bast": ["https://base-sepolia-rpc.publicnode.com"],
  "blst": ["https://sepolia.blast.io"],
  "opst": ["https://sepolia.optimism.io"],
  "unit": ["https://unichain-sepolia.drpc.org"]
}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RPC_ENDPOINTS_JSON –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
RPC_ENDPOINTS_JSON="$DEFAULT_RPC_ENDPOINTS_JSON"

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ JSON
DEFAULT_RPC_ENDPOINTS_ARBT=$(echo "$DEFAULT_RPC_ENDPOINTS_JSON" | jq -r '.arbt[0]')
DEFAULT_RPC_ENDPOINTS_BSSP=$(echo "$DEFAULT_RPC_ENDPOINTS_JSON" | jq -r '.bast[0]')
DEFAULT_RPC_ENDPOINTS_BLSS=$(echo "$DEFAULT_RPC_ENDPOINTS_JSON" | jq -r '.blst[0]')
DEFAULT_RPC_ENDPOINTS_OPSP=$(echo "$DEFAULT_RPC_ENDPOINTS_JSON" | jq -r '.opst[0]')
DEFAULT_RPC_ENDPOINTS_UNIT=$(echo "$DEFAULT_RPC_ENDPOINTS_JSON" | jq -r '.unit[0]')
DEFAULT_RPC_ENDPOINTS_L2RN=$(echo "$DEFAULT_RPC_ENDPOINTS_JSON" | jq -r '.l2rn[0]')


# –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
echo -e "${GREEN}$MSG_RPC_ENDPOINTS: ${NC}" 
read CUSTOM_RPC

if [[ "$CUSTOM_RPC" =~ ^[Yy]$ ]]; then
    echo -e "${ORANGE}$MSG_ENTER_CUSTOM_RPC${NC}"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–π –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π
    declare -A rpc_map=(
        ["arbt"]="Arbitrum Sepolia"
        ["bast"]="Base Sepolia"
        ["blst"]="Blast Sepolia"
        ["opst"]="Optimism Sepolia"
        ["unit"]="Unichain Sepolia"
        ["l2rn"]="L2RN"
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
    RPC_ENDPOINTS_JSON="{"
    for network in "${!rpc_map[@]}"; do
        echo -e "${GREEN}üîå –í–≤–µ–¥–∏—Ç–µ RPC-—Ç–æ—á–∫–∏ –¥–ª—è ${rpc_map[$network]} (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):${NC}"
        read -p "> " endpoints
        if [ -n "$endpoints" ]; then
            RPC_ENDPOINTS_JSON+="\"$network\": $(parse_rpc_input "$endpoints"),"
        else
            default_value=$(echo "$DEFAULT_RPC_ENDPOINTS_JSON" | jq -c ".$network")
            RPC_ENDPOINTS_JSON+="\"$network\": $default_value,"
        fi
    done
    RPC_ENDPOINTS_JSON="${RPC_ENDPOINTS_JSON%,}}"
else
    RPC_ENDPOINTS_JSON="$DEFAULT_RPC_ENDPOINTS_JSON"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
if ! jq empty <<< "$RPC_ENDPOINTS_JSON"; then
    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.${NC}"
    RPC_ENDPOINTS_JSON="$DEFAULT_RPC_ENDPOINTS_JSON"
fi

# –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JSON
export RPC_ENDPOINTS=$(echo "$RPC_ENDPOINTS_JSON" | jq -c .)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ RPC_ENDPOINTS_L1RN –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ
SELECTED_URLS=()
for i in "${VALID_INDICES[@]}"; do
    SELECTED_URLS+=("${L1RN_RPC_OPTIONS[$i]}")
done

# –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
if [ ${#SELECTED_URLS[@]} -eq 0 ]; then
    RPC_ENDPOINTS_L1RN="https://brn.calderarpc.com/http,https://brn.rpc.caldera.xyz/"
else
    RPC_ENDPOINTS_L1RN=$(IFS=,; echo "${SELECTED_URLS[*]}")
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–∑–ª–∞
if [[ "$NODE_TYPE" == "rpc" ]]; then
  echo -e "${GREEN}üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Alchemy RPC endpoints...${NC}"
  
  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ Alchemy —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
  if ! RPC_ENDPOINTS_JSON=$(echo "$RPC_ENDPOINTS_JSON" | jq \
    --arg arbt "https://arb-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
    --arg bast "https://base-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
    --arg opst "https://opt-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
    --arg blst "https://blast-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
    --arg unit "https://unichain-sepolia.g.alchemy.com/v2/$ALCHEMY_API_KEY" \
    '.arbt = (.arbt + [$arbt]) |
     .bast = (.bast + [$bast]) |
     .opst = (.opst + [$opst]) |
     .blst = (.blst + [$blst]) |
     .unit = (.unit + [$unit])' ); then
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å Alchemy endpoints. –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON.${NC}"
    exit 1
fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ JSON
  if ! echo "$RPC_ENDPOINTS_JSON" | jq empty; then
    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:${NC}"
    echo "$RPC_ENDPOINTS_JSON"
    exit 1
  fi
fi

# –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JSON —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
if ! RPC_ENDPOINTS=$(echo "$RPC_ENDPOINTS_JSON" | jq -c .); then
  echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É RPC endpoints:${NC}"
  echo "$RPC_ENDPOINTS_JSON"
  exit 1
fi
export RPC_ENDPOINTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
export PRIVATE_KEY_LOCAL=$WALLET_PRIVATE_KEY
RPC_ENDPOINTS_JSON=$(echo "$RPC_ENDPOINTS_JSON" | jq -c .)
export RPC_ENDPOINTS="$RPC_ENDPOINTS_JSON"

# –í—ã–±–æ—Ä —Å–µ—Ç–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
echo -e "${GREEN}$MSG_AVAILABLE_NETWORKS${NC}"
echo -e "${ORANGE}$MSG_ARBT_DESC${NC}"
echo -e "${ORANGE}$MSG_BSSP_DESC${NC}"
echo -e "${ORANGE}$MSG_BLSS_DESC${NC}"
echo -e "${ORANGE}$MSG_OPSP_DESC${NC}"
echo -e "${ORANGE}üî∑ UNIT = unichain-sepolia${NC}"
echo -e "${RED}$MSG_L2RN_ALWAYS_ENABLED${NC}"

ENABLED_NETWORKS="l2rn"  # l2rn is now always enabled as base layer
while true; do
    read -p "$(echo -e "${GREEN}üåê –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n[ARBT, BAST, BLST, OPST, UNIT] –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö:${NC} ")" USER_NETWORKS
    if [[ -z "$USER_NETWORKS" || "$USER_NETWORKS" =~ ^[Aa][Ll][Ll]$ ]]; then
        ENABLED_NETWORKS="$ENABLED_NETWORKS,arbitrum-sepolia,base-sepolia,blast-sepolia,optimism-sepolia,unichain-sepolia"
        break
    else
        IFS=',' read -r -a networks <<< "$USER_NETWORKS"
        valid=true
        for network in "${networks[@]}"; do
            case "$network" in
                ARBT)
                    ENABLED_NETWORKS="$ENABLED_NETWORKS,arbitrum-sepolia"
                    ;;
                BAST)
                    ENABLED_NETWORKS="$ENABLED_NETWORKS,base-sepolia"
                    ;;
                BLST)
                    ENABLED_NETWORKS="$ENABLED_NETWORKS,blast-sepolia"
                    ;;
                OPST)
                    ENABLED_NETWORKS="$ENABLED_NETWORKS,optimism-sepolia"
                    ;;
                UNIT)
                    ENABLED_NETWORKS="$ENABLED_NETWORKS,unichain-sepolia"
                    ;;
                *)
                    echo -e "${RED}‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Ç—å: $network. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ARBT, BAST, BLST, OPST, UNIT${NC}"
                    valid=false
                    break
                    ;;
            esac
        done
        $valid && break
    fi
done
export ENABLED_NETWORKS

# Export RPC endpoints
export RPC_ENDPOINTS_ARBT
export RPC_ENDPOINTS_BSSP
export RPC_ENDPOINTS_BLSS
export RPC_ENDPOINTS_OPSP
export RPC_ENDPOINTS_L1RN
export EXECUTOR_MAX_L3_GAS_PRICE=$GAS_VALUE

# Display the collected inputs and settings (for verification)
echo -e "${GREEN}$MSG_COLLECTED_INPUTS${NC}"
echo -e "${ORANGE}$MSG_NODE_TYPE_LABEL $NODE_TYPE${NC}"
if [[ "$NODE_TYPE" == "rpc" ]]; then
    # Mask the API key for display
    MASKED_API_KEY="${ALCHEMY_API_KEY:0:6}******${ALCHEMY_API_KEY: -6}"
    echo -e "${ORANGE}$MSG_ALCHEMY_API_KEY_LABEL${NC} ${BLUE}$MASKED_API_KEY${NC}"
fi

# Mask the private key for display
MASKED_PRIVATE_KEY="${WALLET_PRIVATE_KEY:0:6}******${WALLET_PRIVATE_KEY: -6}"
echo -e "${ORANGE}$MSG_WALLET_PRIVATE_KEY_LABEL${NC} ${BLUE}$MASKED_PRIVATE_KEY${NC}"
echo -e "${ORANGE}$MSG_GAS_VALUE_LABEL${NC} ${BLUE}$GAS_VALUE${NC}"
echo -e "${ORANGE}üì° EXECUTOR_PROCESS_PENDING_ORDERS_FROM_API:${NC} ${BLUE}$EXECUTOR_PROCESS_PENDING_ORDERS_FROM_API${NC}"
echo -e "${ORANGE}üì° EXECUTOR_PROCESS_ORDERS_API_ENABLED:${NC} ${BLUE}$EXECUTOR_PROCESS_ORDERS_API_ENABLED${NC}"
echo -e "${ORANGE}üåê NODE_ENV:${NC} ${BLUE}$NODE_ENV${NC}"
echo -e "${ORANGE}üîç LOG_LEVEL:${NC} ${BLUE}$LOG_LEVEL${NC}"
echo -e "${ORANGE}üé® LOG_PRETTY:${NC} ${BLUE}$LOG_PRETTY${NC}"
echo -e "${ORANGE}üíº EXECUTOR_PROCESS_BIDS_ENABLED:${NC} ${BLUE}$EXECUTOR_PROCESS_BIDS_ENABLED${NC}"
echo -e "${ORANGE}üìã EXECUTOR_PROCESS_ORDERS_ENABLED:${NC} ${BLUE}$EXECUTOR_PROCESS_ORDERS_ENABLED${NC}"
echo -e "${ORANGE}üßæ EXECUTOR_PROCESS_CLAIMS_ENABLED:${NC} ${BLUE}$EXECUTOR_PROCESS_CLAIMS_ENABLED${NC}"
echo -e "${GREEN}$MSG_RPC_ENDPOINTS_LABEL${NC}"

# Check which networks are enabled and display their RPC endpoints
if [[ "$ENABLED_NETWORKS" == *"arbitrum-sepolia"* ]]; then
    echo -e "${ORANGE}üîµ ARBT:${NC} ${BLUE}$RPC_ENDPOINTS_ARBT${NC}"
fi
if [[ "$ENABLED_NETWORKS" == *"base-sepolia"* ]]; then
    echo -e "${ORANGE}üîµ BSSP:${NC} ${BLUE}$RPC_ENDPOINTS_BSSP${NC}"
fi
if [[ "$ENABLED_NETWORKS" == *"blast-sepolia"* ]]; then
    echo -e "${ORANGE}üîµ BLSS:${NC} ${BLUE}$RPC_ENDPOINTS_BLSS${NC}"
fi
if [[ "$ENABLED_NETWORKS" == *"optimism-sepolia"* ]]; then
    echo -e "${ORANGE}üîµ OPSP:${NC} ${BLUE}$RPC_ENDPOINTS_OPSP${NC}"
fi
if [[ "$ENABLED_NETWORKS" == *"l1rn"* ]]; then
    echo -e "${ORANGE}üîµ L1RN:${NC} ${BLUE}$RPC_ENDPOINTS_L1RN${NC}"
fi
if [[ "$ENABLED_NETWORKS" == *"blast-sepolia"* ]]; then
    echo -e "${ORANGE}üîµ BLST:${NC} ${BLUE}$RPC_ENDPOINTS_BLSS${NC}"
fi
if [[ "$ENABLED_NETWORKS" == *"unichain-sepolia"* ]]; then
    echo -e "${ORANGE}üîµ UNIT:${NC} ${BLUE}$RPC_ENDPOINTS_UNIT${NC}"
fi

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
echo -e "${RED}$MSG_WARNING${NC}"
sleep 3

# –®–∞–≥ 5: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
echo -e "${GREEN}$MSG_THANKS${NC}"
sleep 3

if $DRY_RUN; then
    echo -e "${GREEN}$MSG_DRY_RUN_RUN_NODE${NC}"
else
    echo -e "\n${ORANGE}$MSG_CHECKING_EXECUTOR${NC}"
    kill_running_executor
    sleep 1

    echo -e "${BLUE}$MSG_RUNNING_NODE${NC}"
    ./executor
fi
