#!/bin/bash

# –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è curl –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if ! command -v curl &> /dev/null; then
    sudo apt update
    sudo apt install curl -y
fi

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
clear
curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
print_menu() {
    echo -e "\n${BOLD}${WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BOLD}${WHITE}‚ïë        üöÄ RITUAL NODE MANAGER          ‚ïë${NC}"
    echo -e "${BOLD}${WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
    
    echo -e "${BOLD}${BLUE}üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:${NC}\n"
    echo -e "${WHITE}[${CYAN}1${WHITE}] ${GREEN}‚ûú ${WHITE}üõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤${NC}"
    echo -e "${WHITE}[${CYAN}2${WHITE}] ${GREEN}‚ûú ${WHITE}üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${NC}"
    echo -e "${WHITE}[${CYAN}3${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏${NC}"
    echo -e "${WHITE}[${CYAN}4${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}5${WHITE}] ${GREEN}‚ûú ${WHITE}üíº –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞${NC}"
    echo -e "${WHITE}[${CYAN}6${WHITE}] ${GREEN}‚ûú ${WHITE}üåê –ò–∑–º–µ–Ω–∏—Ç—å RPC –∞–¥—Ä–µ—Å${NC}"
    echo -e "${WHITE}[${CYAN}7${WHITE}] ${GREEN}‚ûú ${WHITE}‚¨ÜÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}8${WHITE}] ${GREEN}‚ûú ${WHITE}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}9${WHITE}] ${GREEN}‚ûú ${WHITE}üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã${NC}"
    echo -e "${WHITE}[${CYAN}10${WHITE}] ${GREEN}‚ûú ${WHITE}üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
install_ritual() {
    echo -e "\n${BOLD}${BLUE}‚ö° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${NC}\n"

    echo -e "${WHITE}[${CYAN}1/4${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...${NC}"
    sudo apt update && sudo apt upgrade -y
    sudo apt autoremove -y

    echo -e "${WHITE}[${CYAN}2/4${WHITE}] ${GREEN}‚ûú ${WHITE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...${NC}"
    sudo apt -qy install curl git jq lz4 build-essential screen

    echo -e "${WHITE}[${CYAN}3/4${WHITE}] ${GREEN}‚ûú ${WHITE}üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${NC}"
    if ! command -v docker &> /dev/null; then
        sudo apt install docker.io -y
    fi

    echo -e "${WHITE}[${CYAN}4/4${WHITE}] ${GREEN}‚ûú ${WHITE}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...${NC}"
    if ! command -v docker-compose &> /dev/null; then
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    fi

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose CLI –ø–ª–∞–≥–∏–Ω–∞
    DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
    mkdir -p $DOCKER_CONFIG/cli-plugins
    curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
    chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

    echo -e "\n${GREEN}‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}\n"
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    echo -e "${WHITE}[${CYAN}+${WHITE}] ${GREEN}‚ûú ${WHITE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ Ritual...${NC}"
    git clone https://github.com/ritual-net/infernet-container-starter

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker
    docker_yaml=~/infernet-container-starter/deploy/docker-compose.yaml
    sed -i 's/image: ritualnetwork\/infernet-node:1.3.1/image: ritualnetwork\/infernet-node:1.2.0/' "$docker_yaml"

    echo -e "\n${GREEN}‚ú® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...${NC}"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ screen —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    screen -S ritual -dm bash -c "cd ~/infernet-container-starter && project=hello-world make deploy-container"
    
    echo -e "${YELLOW}‚ö° Screen —Å–µ—Å—Å–∏—è 'ritual' —Å–æ–∑–¥–∞–Ω–∞ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"
    echo -e "${CYAN}–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: screen -r ritual${NC}"
    echo -e "${CYAN}–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: CTRL + A + D${NC}"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ screen —Å–µ—Å—Å–∏–∏
    sleep 2
    screen -r ritual
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
install_ritual_2() {
    echo -e "\n${BOLD}${BLUE}‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–æ–¥—ã...${NC}\n"

    echo -e "${WHITE}[${CYAN}1/3${WHITE}] ${GREEN}‚ûú ${WHITE}üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RPC...${NC}"
    echo -ne "${BOLD}${YELLOW}–í–≤–µ–¥–∏—Ç–µ RPC URL: ${NC}"
    read -e rpc_url1

    echo -e "${WHITE}[${CYAN}2/3${WHITE}] ${GREEN}‚ûú ${WHITE}üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...${NC}"
    echo -ne "${BOLD}${YELLOW}–í–≤–µ–¥–∏—Ç–µ Private Key (—Å 0x –∏–ª–∏ –±–µ–∑): ${NC}"
    read -e private_key1
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 0x, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [[ ! $private_key1 =~ ^0x ]]; then
        private_key1="0x$private_key1"
    fi

    echo -e "${WHITE}[${CYAN}3/3${WHITE}] ${GREEN}‚ûú ${WHITE}‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...${NC}"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    json_1=~/infernet-container-starter/deploy/config.json
    json_2=~/infernet-container-starter/projects/hello-world/container/config.json
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    temp_file=$(mktemp)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    jq --arg rpc "$rpc_url1" --arg priv "$private_key1" \
        '.chain.rpc_url = $rpc |
         .chain.wallet.private_key = $priv |
         .chain.trail_head_blocks = 3 |
         .chain.registry_address = "0x3B1554f346DFe5c482Bb4BA31b880c1C18412170" |
         .chain.snapshot_sync.sleep = 3 |
         .chain.snapshot_sync.batch_size = 9500 |
         .chain.snapshot_sync.starting_sub_id = 200000 |
         .chain.snapshot_sync.sync_period = 30' $json_1 > $temp_file

    mv $temp_file $json_1

    jq --arg rpc "$rpc_url1" --arg priv "$private_key1" \
        '.chain.rpc_url = $rpc |
         .chain.wallet.private_key = $priv |
         .chain.trail_head_blocks = 3 |
         .chain.registry_address = "0x3B1554f346DFe5c482Bb4BA31b880c1C18412170" |
         .chain.snapshot_sync.sleep = 3 |
         .chain.snapshot_sync.batch_size = 9500 |
         .chain.snapshot_sync.starting_sub_id = 200000 |
         .chain.snapshot_sync.sync_period = 30' $json_2 > $temp_file

    mv $temp_file $json_2

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Makefile
    makefile=~/infernet-container-starter/projects/hello-world/contracts/Makefile 
    sed -i "s|sender := .*|sender := $private_key1|" "$makefile"
    sed -i "s|RPC_URL := .*|RPC_URL := $rpc_url1|" "$makefile"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Docker
    docker_yaml=~/infernet-container-starter/deploy/docker-compose.yaml
    sed -i 's/image: ritualnetwork\/infernet-node:1.2.0/image: ritualnetwork\/infernet-node:1.4.0/' "$docker_yaml"

    echo -e "\n${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!${NC}"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ docker compose
    echo -e "\n${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ docker compose...${NC}"
    cd ~/infernet-container-starter/deploy && docker compose up -d
    
    echo -e "\n${GREEN}‚ú® –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!${NC}"
    echo -e "${CYAN}–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker compose logs -f${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
install_ritual_3() {
    echo -e "\n${BOLD}${BLUE}‚ö° –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã...${NC}\n"

    echo -e "${WHITE}[${CYAN}1/4${WHITE}] ${GREEN}‚ûú ${WHITE}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Foundry...${NC}"
    curl -L https://foundry.paradigm.xyz | bash
    source ~/.bashrc
    foundryup

    echo -e "${WHITE}[${CYAN}2/4${WHITE}] ${GREEN}‚ûú ${WHITE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    cd ~/infernet-container-starter/projects/hello-world/contracts
    rm -rf lib
    forge install --no-commit foundry-rs/forge-std
    forge install --no-commit ritual-net/infernet-sdk

    echo -e "${WHITE}[${CYAN}3/4${WHITE}] ${GREEN}‚ûú ${WHITE}üìù –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...${NC}"
    cd ~/infernet-container-starter
    project=hello-world make deploy-contracts

    echo -e "${WHITE}[${CYAN}4/4${WHITE}] ${GREEN}‚ûú ${WHITE}‚úçÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...${NC}"
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ –Ω–∞–π–¥–∏—Ç–µ –∞–¥—Ä–µ—Å deployed Sayshello${NC}"
    echo -ne "${CYAN}–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Sayshello: ${NC}"
    read -e says_gm

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CallContract.s.sol
    callcontractpath="$HOME/infernet-container-starter/projects/hello-world/contracts/script/CallContract.s.sol"
    sed -i "s|SaysGM saysGm = SaysGM(.*)|SaysGM saysGm = SaysGM($says_gm)|" "$callcontractpath"

    echo -e "\n${GREEN}üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...${NC}"
    project=hello-world make call-contract

    echo -e "\n${GREEN}‚ú® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã
restart_ritual() {
    echo -e "\n${BOLD}${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã...${NC}\n"
    
    echo -e "${WHITE}[${CYAN}1/2${WHITE}] ${GREEN}‚ûú ${WHITE}‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    cd ~/infernet-container-starter/deploy
    docker compose down
    
    echo -e "${WHITE}[${CYAN}2/2${WHITE}] ${GREEN}‚ûú ${WHITE}‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    echo -e "\n${GREEN}‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:${NC}"
    echo -e "${CYAN}cd ~/infernet-container-starter/deploy && docker compose up${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
change_Wallet_Address() {
    echo -e "\n${BOLD}${BLUE}üíº –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞...${NC}\n"
    
    echo -ne "${BOLD}${YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Private Key (—Å 0x –∏–ª–∏ –±–µ–∑): ${NC}"
    read -e private_key1
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 0x, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [[ ! $private_key1 =~ ^0x ]]; then
        private_key1="0x$private_key1"
    fi

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    json_1=~/infernet-container-starter/deploy/config.json
    json_2=~/infernet-container-starter/projects/hello-world/container/config.json
    makefile=~/infernet-container-starter/projects/hello-world/contracts/Makefile

    temp_file=$(mktemp)

    jq --arg priv "$private_key1" \
        '.chain.wallet.private_key = $priv' $json_1 > $temp_file
    mv $temp_file $json_1

    jq --arg priv "$private_key1" \
        '.chain.wallet.private_key = $priv' $json_2 > $temp_file
    mv $temp_file $json_2

    sed -i "s|sender := .*|sender := $private_key1|" "$makefile"

    echo -e "\n${GREEN}‚úÖ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!${NC}"
    
    echo -e "\n${YELLOW}üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...${NC}"
    cd ~/infernet-container-starter
    project=hello-world make deploy-contracts

    echo -e "\n${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ –Ω–∞–π–¥–∏—Ç–µ –∞–¥—Ä–µ—Å deployed Sayshello${NC}"
    echo -ne "${CYAN}–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Sayshello: ${NC}"
    read -e says_gm

    callcontractpath="$HOME/infernet-container-starter/projects/hello-world/contracts/script/CallContract.s.sol"
    sed -i "s|SaysGM saysGm = SaysGM(.*)|SaysGM saysGm = SaysGM($says_gm)|" "$callcontractpath"

    project=hello-world make call-contract
}

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è RPC –∞–¥—Ä–µ—Å–∞
change_RPC_Address() {
    echo -e "\n${BOLD}${BLUE}üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ RPC –∞–¥—Ä–µ—Å–∞...${NC}\n"
    
    echo -ne "${BOLD}${YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π RPC URL: ${NC}"
    read -e rpc_url1

    json_1=~/infernet-container-starter/deploy/config.json
    json_2=~/infernet-container-starter/projects/hello-world/container/config.json
    makefile=~/infernet-container-starter/projects/hello-world/contracts/Makefile

    temp_file=$(mktemp)

    jq --arg rpc "$rpc_url1" \
        '.chain.rpc_url = $rpc' $json_1 > $temp_file
    mv $temp_file $json_1

    jq --arg rpc "$rpc_url1" \
        '.chain.rpc_url = $rpc' $json_2 > $temp_file
    mv $temp_file $json_2

    sed -i "s|RPC_URL := .*|RPC_URL := $rpc_url1|" "$makefile"

    echo -e "\n${GREEN}‚úÖ RPC –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!${NC}"
    
    echo -e "\n${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker restart infernet-anvil
    docker restart hello-world
    docker restart infernet-node
    docker restart infernet-fluentbit
    docker restart infernet-redis

    echo -e "\n${GREEN}‚ú® –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã
update_ritual() {
    echo -e "\n${BOLD}${BLUE}‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã...${NC}\n"

    json_1=~/infernet-container-starter/deploy/config.json
    json_2=~/infernet-container-starter/projects/hello-world/container/config.json
    temp_file=$(mktemp)

    echo -e "${WHITE}[${CYAN}1/2${WHITE}] ${GREEN}‚ûú ${WHITE}‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
    jq '.chain.snapshot_sync.sleep = 3 |
        .chain.snapshot_sync.batch_size = 9500 |
        .chain.snapshot_sync.starting_sub_id = 200000 |
        .chain.snapshot_sync.sync_period = 30' "$json_1" > "$temp_file"
    mv "$temp_file" "$json_1"

    jq '.chain.snapshot_sync.sleep = 3 |
        .chain.snapshot_sync.batch_size = 9500 |
        .chain.snapshot_sync.starting_sub_id = 200000 |
        .chain.snapshot_sync.sync_period = 30' "$json_2" > "$temp_file"
    mv "$temp_file" "$json_2"

    echo -e "${WHITE}[${CYAN}2/2${WHITE}] ${GREEN}‚ûú ${WHITE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    cd ~/infernet-container-starter/deploy && docker compose down

    echo -e "\n${GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    echo -e "${YELLOW}–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:${NC}"
    echo -e "${CYAN}cd ~/infernet-container-starter/deploy && docker compose up${NC}"
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã
uninstall_ritual() {
    echo -e "\n${BOLD}${RED}‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã...${NC}\n"

    echo -e "${WHITE}[${CYAN}1/3${WHITE}] ${GREEN}‚ûú ${WHITE}‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker stop infernet-anvil infernet-node hello-world infernet-redis infernet-fluentbit
    docker rm -f infernet-anvil infernet-node hello-world infernet-redis infernet-fluentbit
    cd ~/infernet-container-starter/deploy && docker compose down

    echo -e "${WHITE}[${CYAN}2/3${WHITE}] ${GREEN}‚ûú ${WHITE}üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤...${NC}"
    docker image ls -a | grep "infernet" | awk '{print $3}' | xargs docker rmi -f
    docker image ls -a | grep "fluent-bit" | awk '{print $3}' | xargs docker rmi -f
    docker image ls -a | grep "redis" | awk '{print $3}' | xargs docker rmi -f

    echo -e "${WHITE}[${CYAN}3/3${WHITE}] ${GREEN}‚ûú ${WHITE}üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...${NC}"
    rm -rf ~/foundry
    sed -i '/\/root\/.foundry\/bin/d' ~/.bashrc
    rm -rf ~/infernet-container-starter/projects/hello-world/contracts/lib
    cd $HOME
    rm -rf infernet-container-starter

    echo -e "\n${GREEN}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã
check_node_status() {
    echo -e "\n${BOLD}${BLUE}üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã...${NC}\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint
    if curl -s localhost:4000/health > /dev/null; then
        response=$(curl -s localhost:4000/health)
        echo -e "${GREEN}‚úÖ –ù–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ${NC}"
        echo -e "${CYAN}–û—Ç–≤–µ—Ç –æ—Ç –Ω–æ–¥—ã:${NC}"
        echo $response | jq '.'
    else
        echo -e "${RED}‚ùå –ù–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:${NC}"
        echo -e "  ${WHITE}1. –ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞${NC}"
        echo -e "  ${WHITE}2. –ü–æ—Ä—Ç 4000 –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        echo -e "  ${WHITE}3. –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
manage_system() {
    while true; do
        echo -e "\n${BOLD}${WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BOLD}${WHITE}‚ïë      üíæ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô           ‚ïë${NC}"
        echo -e "${BOLD}${WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
        echo -e "${BOLD}${BLUE}üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:${NC}"
        df -h / | tail -n 1 | awk '{print "–í—Å–µ–≥–æ: " $2 "\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: " $3 " (" $5 ")\n–°–≤–æ–±–æ–¥–Ω–æ: " $4}'
        
        echo -e "\n${BOLD}${BLUE}üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:${NC}"
        echo -e "${WHITE}[${CYAN}1${WHITE}] ${GREEN}‚ûú ${WHITE}üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏${NC}"
        echo -e "${WHITE}[${CYAN}2${WHITE}] ${GREEN}‚ûú ${WHITE}üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤${NC}"
        echo -e "${WHITE}[${CYAN}3${WHITE}] ${GREEN}‚ûú ${WHITE}üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker${NC}"
        echo -e "${WHITE}[${CYAN}4${WHITE}] ${GREEN}‚ûú ${WHITE}üö™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é${NC}\n"
        
        echo -e "${BOLD}${BLUE}üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è [1-4]:${NC} "
        read -p "‚ûú " sys_choice

        case $sys_choice in
            1)
                echo -e "\n${BOLD}${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤...${NC}"
                echo -e "${WHITE}–†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏:${NC}"
                ls -lh /var/log/syslog* 2>/dev/null
                
                sudo truncate -s 0 /var/log/syslog
                sudo truncate -s 0 /var/log/syslog.1
                
                echo -e "\n${GREEN}‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã${NC}"
                echo -e "${WHITE}–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤:${NC}"
                ls -lh /var/log/syslog* 2>/dev/null
                ;;
            2)
                echo -e "\n${BOLD}${BLUE}üìä –¢–æ–ø-10 –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:${NC}"
                sudo find / -type f -exec du -Sh {} + 2>/dev/null | sort -rh | head -n 10
                ;;
            3)
                echo -e "\n${BOLD}${BLUE}üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker:${NC}"
                docker system df -v
                echo -e "\n${YELLOW}–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ Docker –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
                echo -e "${CYAN}docker system prune -a${NC}"
                ;;
            4)
                break
                ;;
            *)
                echo -e "\n${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
                ;;
        esac
        
        echo -e "\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
        read
    done
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
while true; do
    clear
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
    curl -s https://raw.githubusercontent.com/Mozgiii9/NodeRunnerScripts/refs/heads/main/logo.sh | bash
    
    print_menu
    echo -e "${BOLD}${BLUE}üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è [1-10]:${NC} "
    read -p "‚ûú " choice

    case $choice in
        1)
            install_ritual
            ;;
        2)
            install_ritual_2
            ;;
        3)
            install_ritual_3
            ;;
        4)
            restart_ritual
            ;;
        5)
            change_Wallet_Address
            ;;
        6)
            change_RPC_Address
            ;;
        7)
            update_ritual
            ;;
        8)
            uninstall_ritual
            ;;
        9)
            check_node_status
            ;;
        10)
            manage_system
            ;;
        *)
            echo -e "\n${BOLD}${RED}‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 10.${NC}\n"
            ;;
    esac

    if [ "$choice" != "10" ]; then
        echo -e "\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é..."
        read
    fi
done 
